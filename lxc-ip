#!/bin/bash
#
# Autor: Henryk Iwaniuk


IP_REGEX="^((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$"

NETMASK_DEFAULT="255.255.255.0"
GATEWAY_DEFAULT="192.168.0.1"
NAMESERVER_DEFAULT="192.168.0.1"

PARENT_DEVICE=${LXD_NETWORK_PARENT:-bond0}

NETMASK=${LXD_GUEST_NETMASK:-$NETMASK_DEFAULT}
GATEWAY=${LXD_GUEST_GATEWAY:-$GATEWAY_DEFAULT}
NAMESERVER=${LXD_GUEST_NAMESERVER:-$NAMESERVER_DEFAULT}

# Usage info
show_help () {
cat << EOF
Usage: ${0##*/} <command> [options]
add a public ip to a container and automatically configure the network inside the container.

Commands:
    set [remote:]<container> <ip>           Set the global ip of a container
    unset [remote:]<container>              Remove public ip configured with set command
EOF
}

die () {
    printf '%s\n' "$1" >&2
    exit 1
}

mode=""
container=""
container_name=""  # container without <remote>:
remote=""
ip=""
service_name=""
iface_name=""
id=""
iface_def=""
unit_def=""
only_host=0

while :; do
    case $1 in
        -h|-\?|--help)
            show_help    # Print Usage
            exit
            ;;
        -l|--host)
            only_host=1;
            ;;
        set)
            mode="set";
            if [ "$2" ]; then
                container=$2
                if [ "$only_host" -eq "0" ]; then
                    if [ "$3" ]; then
                        ip=$3
                        shift
                    else
                        die 'ERROR: "set" requires an <ip> argument.'
                    fi
                fi
                shift
            else
                die 'ERROR: "set" requires <container> and <ip> arguments.'
            fi
            break
            ;;
        unset)
            mode="unset";
            if [ "$2" ]; then
                container=$2
                shift
            else
                die 'ERROR: "unset" requires a <container> argument.'
            fi
            break
            ;;
        -?*)
            printf 'WARN: Unknown option (ignored): %s\n' "$1" >&2
            ;;
        *)
            break
    esac

    shift
done

container_exists () {
	c_exists=$(lxc list $2 | awk -v cont=$1 '($2==cont) {print $2}')
	if [ -z "$c_exists" ]; then
		die 'container does not exist';
	fi
	return 1;
}

ip_is_valid () {
	if [[ "$1" =~ $IP_REGEX ]]; then
		return 1;
	else
		die 'Invalid ip';
	fi
}

set_iface_def () {
	iface_def=$(cat <<-END
    auto eth0
    iface eth0 inet static
        address $ip
        netmask $NETMASK
        gateway $GATEWAY
        dns-nameservers $NAMESERVER
	END
	)
}

set_unit_def () {
	unit_def=$(cat <<-END
        [Unit]
        Description="Unit for starting network interface required by a lxd container"
        After=sys-subsystem-net-devices-$PARENT_DEVICE.device
        Before=lxd-containers.service

        [Service]
        Type=oneshot
        RemainAfterExit=True
        ExecStart=/bin/bash -c "/sbin/ip link add $iface_name link $PARENT_DEVICE type ipvlan mode l2"
        ExecStop=/bin/bash -c "/sbin/ip link del $iface_name"

        [Install]
        #WantedBy=sys-subsystem-net-devices-$PARENT_DEVICE.device
        WantedBy=multi-user.target
	END
	)
}

create_unit_file () {
    echo "$unit_def" > "/etc/systemd/system/$service_name"
    systemctl daemon-reload
}

activate_unit () {
    systemctl enable $service_name;
    systemctl start $service_name;
}

attach_iface_to_container () {
    lxc config device add $container_name eth0 nic name=eth0 nictype=physical parent=$iface_name
}

push_iface_def_to_container () {
	echo "$iface_def" > iface_dev.tmp
	lxc file push ./iface_dev.tmp $remote$container_name/etc/network/interfaces.d/lxd-net
	rm iface_dev.tmp
}

activate_interfaces_d () {
	contains_source=$(lxc exec $remote$container_name cat /etc/network/interfaces | grep "source /etc/network/interfaces.d/*");
	if [ -z "$contains_source" ]; then
		lxc exec $remote$container_name -- sh -c "echo 'source /etc/network/interfaces.d/*' >> /etc/network/interfaces";
	fi
}

activate_network () {
	lxc exec $remote$container_name systemctl restart networking
}

process_set () {
	container_name=$(echo "$container" | grep -oE "[^:]+$");
	remote=$(echo "$container" | grep -oE "^[^:]+:");
	container_exists $container_name $remote;
	service_name="lxd-net-$container_name.service"
	iface_name="lxd-$container_name"
	iface_name=${iface_name:0:15}

	if [ "$only_host" -eq "0" ]; then
	    ip_is_valid $ip;
	    id=$(echo "$ip" | grep -oE "[^.]+$");
	fi

    set_unit_def;
	create_unit_file;
	activate_unit;

	if [ "$only_host" -eq "0" ]; then
        set_iface_def;
        attach_iface_to_container;
        push_iface_def_to_container;
        activate_interfaces_d;
        sleep 1;
        activate_network;
    fi
}

delete_iface_def_from_container () {
	lxc file delete $container/etc/network/interfaces.d/lxd-net
}

remove_iface_from_config () {
    lxc config device remove $container eth0
    lxc exec $container systemctl restart networking
}

disable_and_remove_unit () {
    systemctl stop $service_name;
    systemctl disable $service_name;
    rm "/etc/systemd/system/$service_name"
}

process_unset () {
    if [ "$only_host" -eq "0" ]; then
        container_name=$(echo "$container" | grep -oE "[^:]+$");
        remote=$(echo "$container" | grep -oE "^[^:]+:");
        container_exists $container_name $remote;
        service_name="lxd-net-$container_name.service";
        delete_iface_def_from_container;
        remove_iface_from_config;
        disable_and_remove_unit;
    else
        container_name=$(echo "$container" | grep -oE "[^:]+$");
        service_name="lxd-net-$container_name.service";
        disable_and_remove_unit;
    fi
}

if [ "$mode" == "set" ]; then
    process_set
else
    process_unset
fi
