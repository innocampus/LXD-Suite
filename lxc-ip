#!/bin/bash
#
# script for adding a network with public ip to a container 
# and automatically configuring the network inside the container.
#
# lxc-ip set [remote:]<container> <ip>
# lxc-ip unset [remote:]<container>
#
# Autor: Henryk Iwaniuk

IP_REGEX="^((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$"

mode=""
container=""
container_name=""  # container without <remote>:
remote=""
ip=""
brname=""
id=""
iface_def=""

set_iface_def () {
	iface_def=$(cat <<-END
	auto lxbr
	iface lxbr inet static
	    address $ip
	    netmask 255.255.255.0
	    gateway 10.10.$id.1
	    pre-up ip -4 link set dev lxbr up
	    pre-up ip -4 route add dev lxbr 10.10.$id.1/32
	END
	)
}

print_usage () {
	echo "usage:";
	echo "	lxc-ip set <container> <ip>";
	echo "	lxc-ip unset <container>";
}

container_exists () {
	c_exists=$(lxc list $2 | awk -v cont=$1 '($2==cont) {print $2}')
	if [ -z "$c_exists" ]; then
		echo "container $1 does not exist";
		exit 13;
	fi
	return 1;
}

ip_is_valid () {
	if [[ "$1" =~ $IP_REGEX ]]; then
		return 1;
	else
		echo "Invalid ip";
		exit 255;
	fi
}

create_network () {
	lxc network create $remote$brname ipv4.address=10.10."$id".1/24 ipv6.address=none ipv4.nat="true" ipv4.dhcp="true" ipv4.routing="true" ipv4.routes="$ip"
	if [ $? -ne 0 ]
	then
		echo "creating the network failed.";
		exit 999;
	fi
}

attach_network () {
	lxc network attach $remote$brname $container_name bridge lxbr
}

process_input () {
	if [ "$1" == "set" ]
	then
		process_set $2 $3;
	elif [ "$1" == "unset" ]
	then
		process_unset $2;
	else
		print_usage;
	fi
}

push_iface_def_to_container () {
	echo "$iface_def" > iface_dev.tmp
	lxc file push ./iface_dev.tmp $remote$container_name/etc/network/interfaces.d/lxbr
}

activate_interfaces_d () {
	contains_source=$(lxc exec $remote$container_name cat /etc/network/interfaces | grep "source /etc/network/interfaces.d/*");
	if [ -z "$contains_source" ]; then
		lxc exec $remote$container_name -- sh -c "echo 'source /etc/network/interfaces.d/*' >> /etc/network/interfaces";
	fi
}

activate_network () {
	lxc exec $remote$container_name systemctl restart networking
}

detach_bridge () {
	lxc network detach $remote$brname $container_name
}

delete_bridge () {
	lxc network delete $remote$brname
}

delete_iface_def_from_container () {
	lxc file delete $container/etc/network/interfaces.d/lxbr
}

process_set () {
	echo "set";
	mode="set";
	container=$1;
	container_name=$(echo "$container" | grep -oE "[^:]+$");
	remote=$(echo "$container" | grep -oE "^[^:]+:");
	container_exists $container_name $remote;
	brname="lxdbr-$container_name"
	ip_is_valid $2;
	ip="$2";
	id=$(echo "$ip" | grep -oE "[^.]+$");

	#print_all;
	create_network;
	attach_network;
	set_iface_def;
	push_iface_def_to_container;
	activate_interfaces_d;
	activate_network;
	# print_all;
}

process_unset () {
	echo "unset";
	mode="unset";
	container=$1;
	container_name=$(echo "$container" | grep -oE "[^:]+$");
	remote=$(echo "$container" | grep -oE "^[^:]+:");
	container_exists $container_name $remote;
	brname="lxdbr-$container_name";
	detach_bridge;
	delete_bridge;
	delete_iface_def_from_container;
}

print_all () {
	echo "*** print all ***";
	echo "mode: $mode";
	echo "containier: $container";
	echo "brname: $brname";
	echo "ip: $ip";
	echo "id: $id";
	echo "name: $container_name";
	echo "remote: $remote";
	#echo "iface def:";
	#echo "$iface_def"
}

process_input $1 $2 $3;

