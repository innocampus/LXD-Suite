#!/bin/bash
#
# script for moving a container to a remote server and
# restoring network settings if set up using the lxc-ip script.
#
# depends:
#     lxc-dump         on host
#     lxc-restore      on remote
#     lxc-ip           on remote
#
# lxc-migrate <container> <remote>
#
# Autor: Henryk Iwaniuk

echoerr () {
    echo "error: $@" 1>&2;
}

random-string () {
    cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w ${1:-32} | head -n 1
}

container_is_running () {
	c_running=$(lxc list --format csv -c n,s | grep RUNNING | grep $1)
	if [ -z "$c_running" ]; then
		return 0;
	fi
	return 1;
}

stop_container_if_running () {
    container_is_running $1;
    if [ $? -eq 1 ];
    then
        was_running=1;
        echo "stopping container $1";
        lxc stop $1
    fi
}

delete_local_container () {
    echo "deleting container $container_name";
    lxc delete $container_name;
}

cleanup () {
    rm /tmp/lxd_dump/$filename;
}

container_name=$1
remote=$2

filename=lxd_dump_"$container_name"_$(random-string 10).tar.gz

mkdir -p /tmp/lxd_dump;

stop_container_if_running $container_name;
lxc-dump $container_name /tmp/lxd_dump $filename;

if [ ! -f /tmp/lxd_dump/$filename ]; then
    echoerr "dump file not created.";
    exit 11;
fi

scp /tmp/lxd_dump/$filename $remote:/tmp/

if [ $? -ne 0 ]; then
    echoerr "copy failed. exit.";
    exit 22;
fi

ssh -t $remote "echo 'enter root password for remote'; su - root -c \"lxc-restore /tmp/$filename $container_name; if [ \$? -ne 0 ]; then exit 66; fi; lxc-ip -l set $container_name\"; rm /tmp/$filename";

if [ $? -ne 0 ]; then
    cleanup;
    echoerr "restore on remote failed. exit.";
    exit 33;
fi

delete_local_container;
cleanup;