#!/bin/bash
#
# Autor: Henryk Iwaniuk

# TODO allow changing ip on restore


# Usage info

die () {
    printf '%s\n' "$1" >&2
    exit 1
}

random-string () {
    cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w ${1:-32} | head -n 1
}

show_help () {
cat << EOF
Usage: ${0##*/} <tar-file> <container-name>
restores container from tar.gz

Example:
    ${0##*/} container1_backup_full.tar.gz container1
EOF
}

container=
size=
tar_file=

mnt_path=/tmp/lxc_restore_$(random-string 10)
POOL_NAME="default"
VG_NAME="lxc-$HOSTNAME"

while :; do
    case $1 in
        -h|-\?|--help)
            show_help    # Print Usage
            exit
            ;;
        $1)
            if [ -z "$1" ]; then
                break;
            fi
            if [ -z "$2" ]; then
                die 'ERROR: <tar-file> and <container-name> arguments expected'
            fi
            container=$2
            tar_file=$(realpath $1)
            shift
            ;;
        -?*)
            printf 'WARN: Unknown option (ignored): %s\n' "$1" >&2
            ;;
        *)
            ;;
    esac

    shift
done

if [ -z "$container" ]; then
    show_help
    die "ERROR: no container name set.";
fi

if [ -z "$tar_file" ]; then
    show_help
    die "ERROR: tar file expected.";
fi

if [ ! -f $tar_file ]; then
    die "ERROR: file does not exist.";
fi

get_size () {
    mkdir -p "$mnt_path";
    tar -zxvf "$tar_file" -C $mnt_path "size.bak" > /dev/null
    size=$(cat "$mnt_path/size.bak")

    if [ -z $size ] || [[ ! $size =~ ^[0-9]*GB$ ]]; then
	read -p "The Container does not have a size set. set a size? [Y/n]" -n 1 -r;
	if [[ $REPLY =~ ^[Yy]$ ]]; then
		REPLY=
		echo ""
		while [[ ! $REPLY =~ ^[0-9]*GB$ ]]; do
			read -p "Enter size for root device (e.g. 20GB): "
			size="$REPLY"
		done
	fi

	if [ -z $size ]; then
	    die "ERROR: no size set";
	fi
fi
}

create_lv () {
    lvcreate --thin "$VG_NAME/LXDThinpool" -V "$size" -n "containers_"$container"_restore" > /dev/null
    if [ $? -ne 0 ]; then
        die "lv creation failed. exit.";
    fi
}

fill_lv () {
    mkfs.xfs "/dev/$VG_NAME/containers_"$container"_restore" > /dev/null
    mkdir -p "$mnt_path"
    mount "/dev/$VG_NAME/containers_"$container"_restore" "$mnt_path"
    cd "$mnt_path"
    printf "extracting tarball. this might take a while..."
    tar -xf "$tar_file" > /dev/null
    cd ../
    umount "$mnt_path"
}

parse_backup_yaml () {
    INTERFACE_NAME="lxd-$container"
    INTERFACE_NAME=${INTERFACE_NAME:0:15}

    file_path="/var/lib/lxd/storage-pools/$POOL_NAME/containers/$container/backup.yaml";

    if [ ! -f $file_path ]; then
            echo "error: file not valid.";
            exit 11;
    fi

    section=''
    filestring=''

    IFS=''
    while read l; do

        if [[ $l =~ ^[^[:space:]][A-Za-z]* ]]; then
                filestring="$filestring$l\n";
                section="$BASH_REMATCH";
                continue;
        fi
        if [ -z "$section" ]; then
                filestring="$filestring$l\n";
                continue;
        fi

        new_l=$l

        # replace stuff that has to change in every section
        new_l=$(printf "$new_l" | sed "s/pool: .*/pool: $POOL_NAME/");
        new_l=$(printf "$new_l" | sed "s/lvm.vg_name: .*/lvm.vg_name: $VG_NAME/");
        new_l=$(printf "$new_l" | sed "s/parent: lxd-.*/parent: $INTERFACE_NAME/");

        # depends on section
        if [ "$section" == "container" ]; then
                new_l=$(printf "$new_l" | sed "s/^  name: .*/  name: $container/");
        fi

        if [ "$section" == "volume" ]; then
                new_l=$(printf "$new_l" | sed "s/^  name: .*/  name: $container/");
        fi

        if [ "$section" == "pool" ]; then
                new_l=$(printf "$new_l" | sed "s/name: .*/name: $POOL_NAME/");
        fi

        filestring="$filestring$new_l\n";
    done <<< "$(cat $file_path)"

    printf "$filestring" > $file_path;

}

prepare_env () {
    mkdir "/var/lib/lxd/storage-pools/$POOL_NAME/containers/$container"
    mount "/dev/$VG_NAME/containers_"$container"_restore" "/var/lib/lxd/storage-pools/$POOL_NAME/containers/$container"
}

lxd_import () {
    lxd import "$container"
}

post_import () {
    lvrename "/dev/$VG_NAME/containers_"$container"_restore" "/dev/$VG_NAME/containers_$container" > /dev/null
    ln -s "/var/lib/lxd/storage-pools/$POOL_NAME/containers/$container" "/var/lib/lxd/containers/$container"
    lxc-ip -l set "$container"
}

main () {
    get_size
    create_lv
    fill_lv
    prepare_env
    parse_backup_yaml
    lxd_import
    post_import
}

main
